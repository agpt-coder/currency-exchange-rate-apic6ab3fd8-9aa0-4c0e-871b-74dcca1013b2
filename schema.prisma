// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id           String         @id @default(dbgenerated("gen_random_uuid()"))
  email        String         @unique
  password     String
  role         Role           @default(BASICUSER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  APIKeys      APIKey[]
  ExchangeLogs ExchangeLog[]
  Subscription Subscription[]
}

model APIKey {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  key       String   @unique
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExchangeRate {
  id                 String   @id @default(dbgenerated("gen_random_uuid()"))
  baseCurrency       String
  targetCurrency     String
  rate               Float
  timestamp          DateTime @default(now())
  ExchangeRateSource String
}

model ExchangeLog {
  id               String   @id @default(dbgenerated("gen_random_uuid()"))
  userId           String
  User             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  requestedAt      DateTime @default(now())
  baseCurrency     String
  targetCurrencies String[]
  response         Json?
}

model ExternalAPICall {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  service   String
  callTime  DateTime @default(now())
  success   Boolean
  errorCode String?
  errorDesc String?
}

model CachedRate {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  baseCurrency   String
  targetCurrency String
  rate           Float
  createdAt      DateTime @default(now())
  validUntil     DateTime
}

model HistoricalRate {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  baseCurrency   String
  targetCurrency String
  rate           Float
  timestamp      DateTime
}

model SystemLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  level     LogLevel
  message   String
  timestamp DateTime @default(now())
}

model Subscription {
  id        String           @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      SubscriptionType
  startDate DateTime         @default(now())
  endDate   DateTime
}

enum Role {
  BASICUSER
  PREMIUMUSER
  ADMIN
}

enum LogLevel {
  INFO
  WARNING
  ERROR
}

enum SubscriptionType {
  BASIC
  PREMIUM
}

